{"version":3,"sources":["webpack:///./src/components/Disqus/index.js","webpack:///./src/components/Share/index.js","webpack:///./src/templates/article-page.js","webpack:///./src/components/Content/index.js","webpack:///./src/components/SEO/index.js"],"names":["Component","ArticleTemplate","_ref","content","contentComponent","cover","meta_title","meta_desc","tags","title","slug","PostContent","Content","react_default","a","createElement","layout","className","SEO","src","alt","length","style","marginTop","map","tag","key","gatsby_link_default","to","kebabCase","propTypes","PropTypes","string","isRequired","func","ArticlePage","_ref2","post","data","markdownRemark","article_page_ArticleTemplate","html","HTMLContent","frontmatter","meta_description","fields","shape","object","pageQuery","__webpack_require__","d","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","prop_types__WEBPACK_IMPORTED_MODULE_1__","prop_types__WEBPACK_IMPORTED_MODULE_1___default","dangerouslySetInnerHTML","__html","_meta_config__WEBPACK_IMPORTED_MODULE_1__","_meta_config__WEBPACK_IMPORTED_MODULE_1___default","react_helmet__WEBPACK_IMPORTED_MODULE_2__","react_helmet__WEBPACK_IMPORTED_MODULE_2___default","SE0","postURL","config","siteUrl","realPrefix","pathPrefix","image","blogURL","schemaOrgJSONLD","@context","@type","url","name","alternateName","siteTitleAlt","push","itemListElement","position","item","@id","headline","type","JSON","stringify","property","siteFBAppID","userTwitter"],"mappings":"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","file":"component---src-templates-article-page-js-ec8a9b08a456c73292e1.js","sourcesContent":["/**\n * Created by vaibhav on 1/4/18\n */\nimport React, {Component} from 'react'\nimport ReactDisqusComments from 'react-disqus-comments'\nimport config from '../../../meta/config'\n\nclass Disqus extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      toasts: [],\n    }\n    this.notifyAboutComment = this.notifyAboutComment.bind(this)\n    this.onSnackbarDismiss = this.onSnackbarDismiss.bind(this)\n  }\n\n  onSnackbarDismiss () {\n    const [, ...toasts] = this.state.toasts\n    this.setState({toasts})\n  }\n\n  notifyAboutComment () {\n    const toasts = this.state.toasts.slice()\n    toasts.push({text: 'New comment available!'})\n    this.setState({toasts})\n  }\n\n  render () {\n    const {title, slug} = this.props\n    if (!config.disqusShortname) {\n      return null\n    }\n    const url = config.siteUrl + config.pathPrefix + slug\n    return (\n      <ReactDisqusComments\n        shortname={config.disqusShortname}\n        identifier={title}\n        title={title}\n        url={url}\n        onNewComment={this.notifyAboutComment}\n      />\n    )\n  }\n}\n\nexport default Disqus\n","import React, {Component} from 'react'\nimport {\n  FacebookShareButton,\n  GooglePlusShareButton,\n  LinkedinShareButton,\n  TwitterShareButton,\n  TelegramShareButton,\n  RedditShareButton,\n  FacebookShareCount,\n  GooglePlusShareCount,\n  LinkedinShareCount,\n  RedditShareCount,\n  FacebookIcon,\n  TwitterIcon,\n  TelegramIcon,\n  GooglePlusIcon,\n  LinkedinIcon,\n  RedditIcon,\n} from 'react-share'\nimport config from '../../../meta/config'\n\nclass Share extends Component {\n  render () {\n    const {title, slug, excerpt, mobile} = this.props\n    const realPrefix = config.pathPrefix === '/' ? '' : config.pathPrefix\n    const url = config.siteUrl + realPrefix + slug\n\n    const iconSize = mobile ? 36 : 48\n    const filter = count => (count > 0 ? count : '')\n\n    return (\n      <div className='social-links'>\n        <RedditShareButton url={url} title={title}>\n          <RedditIcon round size={iconSize} />\n          <RedditShareCount url={url}>\n            {count => <div className='share-count'>{filter(count)}</div>}\n          </RedditShareCount>\n        </RedditShareButton>\n        <TwitterShareButton url={url} title={title}>\n          <TwitterIcon round size={iconSize} />\n        </TwitterShareButton>\n        <GooglePlusShareButton url={url}>\n          <GooglePlusIcon round size={iconSize} />\n          <GooglePlusShareCount url={url}>\n            {count => <div className='share-count'>{filter(count)}</div>}\n          </GooglePlusShareCount>\n        </GooglePlusShareButton>\n        <FacebookShareButton url={url} quote={excerpt}>\n          <FacebookIcon round size={iconSize} />\n          <FacebookShareCount url={url}>\n            {count => <div className='share-count'>{filter(count)}</div>}\n          </FacebookShareCount>\n        </FacebookShareButton>\n        <LinkedinShareButton\n          url={url}\n          title={title}\n          description={excerpt}\n        >\n          <LinkedinIcon round size={iconSize} />\n          <LinkedinShareCount url={url}>\n            {count => <div className='share-count'>{filter(count)}</div>}\n          </LinkedinShareCount>\n        </LinkedinShareButton>\n        <TelegramShareButton url={url}>\n          <TelegramIcon round size={iconSize} />\n        </TelegramShareButton>\n      </div>\n    )\n  }\n}\n\nexport default Share\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { kebabCase } from 'lodash'\nimport Link from 'gatsby-link'\nimport Content, { HTMLContent } from '../components/Content'\nimport Layout from '../components/layout'\nimport SE0 from '../components/SEO'\nimport Disqus from '../components/Disqus'\nimport Share from '../components/Share'\n\nexport const ArticleTemplate = ({\n  content,\n  contentComponent,\n  cover,\n  meta_title,\n  meta_desc,\n  tags,\n  title,\n  slug,\n}) => {\n  const PostContent = contentComponent || Content\n\n  return (\n    <Layout>\n      <section className='section'>\n        <SE0\n          title={title}\n          meta_title={meta_title}\n          meta_desc={meta_desc}\n          cover={cover}\n          slug={slug}\n        />\n        <div className='container content'>\n          <div className='columns'>\n            <div className='column is-10 is-offset-1'>\n              <h1 className='title is-size-2 has-text-weight-bold is-bold-light'>\n                {title}\n              </h1>\n              <img src={cover} alt={title} />\n              <PostContent content={content} />\n              {tags && tags.length ? (\n                <div style={{marginTop: `4rem`}}>\n                  <h4>Теги</h4>\n                  <ul className='taglist'>\n                    {tags.map(tag => (\n                      <li key={tag + `tag`}>\n                        <Link to={`/tags/${kebabCase(tag)}/`}>{tag}</Link>\n                      </li>\n                    ))}\n                  </ul>\n                </div>\n              ) : null}\n              <hr />\n              {/*<Share\n                title={title}\n                slug={slug}\n                excerpt={meta_desc}\n              />\n              <hr />\n              <Disqus\n                title={title}\n                slug={slug}\n              />*/}\n            </div>\n          </div>\n        </div>\n      </section>\n    </Layout>\n  )\n}\n\nArticleTemplate.propTypes = {\n  content: PropTypes.string.isRequired,\n  contentComponent: PropTypes.func,\n  cover: PropTypes.string,\n  meta_title: PropTypes.string,\n  meta_desc: PropTypes.string,\n  title: PropTypes.string,\n  slug: PropTypes.string,\n}\n\nconst ArticlePage = ({data}) => {\n  const {markdownRemark: post} = data\n  return (\n    <ArticleTemplate\n      content={post.html}\n      contentComponent={HTMLContent}\n      cover={post.frontmatter.cover}\n      meta_title={post.frontmatter.meta_title}\n      meta_desc={post.frontmatter.meta_description}\n      tags={post.frontmatter.tags}\n      title={post.frontmatter.title}\n      slug={post.fields.slug}\n    />\n  )\n}\n\nArticlePage.propTypes = {\n  data: PropTypes.shape({\n    markdownRemark: PropTypes.object,\n  }),\n}\n\nexport default ArticlePage\n\nexport const pageQuery = graphql`\n  query ArticleByID($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      id\n      html\n      fields {\n            slug\n          }\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        title\n        cover\n        meta_title\n        meta_description\n        tags\n      }\n    }\n  }\n`\n","/**\n * Created by vaibhav on 31/3/18\n */\nimport React from 'react'\nimport PropTypes from 'prop-types'\n\nexport const HTMLContent = ({ content, className }) => (\n  <div className={className} dangerouslySetInnerHTML={{ __html: content }} />\n)\n\nconst Content = ({ content, className }) => (\n  <div className={className}>{content}</div>\n)\n\nContent.propTypes = {\n  content: PropTypes.string,\n  className: PropTypes.string,\n}\n\nHTMLContent.propTypes = Content.propTypes\n\nexport default Content\n","/**\n * Created by vaibhav on 31/3/18\n */\nimport React from 'react'\nimport config from '../../../meta/config'\nimport Helmet from 'react-helmet'\n\nconst SE0 = ({title, meta_title, meta_desc, cover, slug}) => {\n  let postURL = config.siteUrl + slug\n  const realPrefix = config.pathPrefix === '/' ? '' : config.pathPrefix\n  let image = config.siteUrl + realPrefix + cover\n  const blogURL = config.siteUrl + config.pathPrefix\n  const schemaOrgJSONLD = [\n    {\n      '@context': 'http://schema.org',\n      '@type': 'WebSite',\n      url: blogURL,\n      name: title,\n      alternateName: config.siteTitleAlt ? config.siteTitleAlt : '',\n    },\n  ]\n\n  schemaOrgJSONLD.push([\n    {\n      '@context': 'http://schema.org',\n      '@type': 'BreadcrumbList',\n      itemListElement: [\n        {\n          '@type': 'ListItem',\n          position: 1,\n          item: {\n            '@id': postURL,\n            name: title,\n            image,\n          },\n        },\n      ],\n    },\n    {\n      '@context': 'http://schema.org',\n      '@type': 'BlogPosting',\n      url: blogURL,\n      name: title,\n      alternateName: config.siteTitleAlt ? config.siteTitleAlt : '',\n      headline: title,\n      image: {\n        '@type': 'ImageObject',\n        url: image,\n      },\n      meta_desc,\n    },\n  ])\n\n  return (\n    <Helmet>\n      <title>{meta_title}</title>\n      {/* General tags */}\n      <meta name='description' content={meta_desc} />\n      <meta name='image' content={cover} />\n      {/* Schema.org tags */}\n      <script type='application/ld+json'>\n        {JSON.stringify(schemaOrgJSONLD)}\n      </script>\n      {/* OpenGraph tags */}\n      <meta property='og:url' content={postURL} />\n      <meta property='og:type' content='article' />\n      <meta property='og:title' content={title} />\n      <meta property='og:description' content={meta_desc} />\n      <meta property='og:image' content={image} />\n      <meta\n        property='fb:app_id'\n        content={config.siteFBAppID ? config.siteFBAppID : ''}\n      />\n      {/* Twitter Card tags */}\n      <meta name='twitter:card' content='summary_large_image' />\n      <meta\n        name='twitter:creator'\n        content={config.userTwitter ? config.userTwitter : ''}\n      />\n      <meta name='twitter:title' content={title} />\n      <meta name='twitter:description' content={meta_desc} />\n      <meta name='twitter:image' content={image} />\n    </Helmet>\n  )\n}\n\nexport default SE0\n"],"sourceRoot":""}